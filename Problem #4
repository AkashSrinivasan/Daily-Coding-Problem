Given an array of integers, find the first missing positive integer in linear time and constant space. In other words, find the lowest positive integer that does not exist in the array. The array can contain duplicates and negative numbers as well.

For example, the input [3, 4, -1, 1] should give 2. The input [1, 2, 0] should give 3.

You can modify the input array in-place.

solution:-
___________________________________________________


#include<stdlib.h> 
#include<stdio.h> 
#include<iostream>
using namespace std;

void merge(int arr[], int l, int m, int r) 
{ 
	int i, j, k; 
	int n1 = m - l + 1; 
	int n2 = r - m; 
	int L[n1], R[n2]; 
	for (i = 0; i < n1; i++){ 
		L[i] = arr[l + i]; 
	}
	for (j = 0; j < n2; j++) {
		R[j] = arr[m + 1+ j];
	}
	i = 0;  
	j = 0; 
	k = l;  
	while (i < n1 && j < n2) 
	{ 
		if (L[i] <= R[j]) 
		{ 
			arr[k] = L[i]; 
			i++; 
		} 
		else
		{ 
			arr[k] = R[j]; 
			j++; 
		} 
		k++; 
	} 


	while (i < n1) 
	{ 
		arr[k] = L[i]; 
		i++; 
		k++; 
	} 


	while (j < n2) 
	{ 
		arr[k] = R[j]; 
		j++; 
		k++; 
	} 
} 


void mergeSort(int arr[], int l, int r) 
{ 
	if (l < r) 
	{ 
		int m = l+(r-l)/2; 

		
		mergeSort(arr, l, m); 
		mergeSort(arr, m+1, r); 

		merge(arr, l, m, r); 
	} 
} 
// void printArray(int A[], int size) 
// { 
// 	int i; 
// 	for (i=0; i < size; i++) 
// 		printf("%d ", A[i]); 
// 	printf("\n"); 
// } 

void missing_array(int arr[],int N){
    int missed = 0;
    for(int i=0;i<N-1;i++){
       int check=arr[i]+1;
       int che = arr[i]-1;
       if(arr[i+1]!=check || arr[i-1]!=che  ){
           if(che>0 && check > 0){
           missed=check;
           if(arr[i-1]!=che){
               missed = che;
           }
           cout<<missed;
           break;
           }
       }
    }
    if(missed==0){
    cout<<arr[N-1]+1;
    }
    
}
int main() 
{ 
    int n;
    cin>>n;
    int arr[n];
	for(int i=0;i<n;i++){
	    cin>>arr[i];
	}
	int arr_size = sizeof(arr)/sizeof(arr[0]); 

	mergeSort(arr, 0, arr_size - 1); 
	
	missing_array(arr,arr_size);
	return 0; 
} 


Output:-
___________________________________________________________________
4
3 4 -1 1
ans:-
2

3
2 1 0 
ans:-
3
