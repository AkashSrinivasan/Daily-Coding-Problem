Given a list of numbers and a number k, return whether any two numbers from the list add up to k.

For example, given [10, 15, 3, 7] and k of 17, return true since 10 + 7 is 17.


solution:-
_________________________________________________________________________________

#include <iostream>

using namespace std;

void merge(int arr[], int l, int m, int r) 
{ 
	int i, j, k; 
	int n1 = m - l + 1; 
	int n2 = r - m; 
	int L[n1], R[n2]; 
	for (i = 0; i < n1; i++){ 
		L[i] = arr[l + i]; 
	}
	for (j = 0; j < n2; j++) {
		R[j] = arr[m + 1+ j];
	}
	i = 0;  
	j = 0; 
	k = l;  
	while (i < n1 && j < n2) 
	{ 
		if (L[i] <= R[j]) 
		{ 
			arr[k] = L[i]; 
			i++; 
		} 
		else
		{ 
			arr[k] = R[j]; 
			j++; 
		} 
		k++; 
	} 


	while (i < n1) 
	{ 
		arr[k] = L[i]; 
		i++; 
		k++; 
	} 


	while (j < n2) 
	{ 
		arr[k] = R[j]; 
		j++; 
		k++; 
	} 
} 


void mergeSort(int arr[], int l, int r) 
{ 
	if (l < r) 
	{ 
		int m = l+(r-l)/2; 

		
		mergeSort(arr, l, m); 
		mergeSort(arr, m+1, r); 

		merge(arr, l, m, r); 
	} 
} 

int main()
{
    int N;
    cout<<"enter the array count";
    cin>>N;
    cout<<"enter the addition of 2 num";
    int added;
    cin>>added;
    int arr[N];
    for(int i=0;i<N;i++){
        cin>>arr[i];
    }
    int arr_size = sizeof(arr)/sizeof(arr[0]); 

	mergeSort(arr, 0, arr_size - 1); 
	int i=0;
	int j = N-1;
	int add;
	while(i!=j){
	     add = arr[i]+arr[j];
	    if(add==added){
	       // ans = true;
	        break;
	    }
	    if(add>added){
	        j--;
	    }
	    else{
	        i++;
	    }
	}
	if(add==added){
	    cout<<"true";
	}
	else{
	    cout<<"false";
	}
    return 0;
}


Solution:-
-------------------------------------------------------------------------------------------

4 
10 15 7 3
17(10+7)
ans:-
true
